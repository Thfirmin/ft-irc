Portas válidas:

As portas em um sistema de rede são numeradas de 0 a 65535, totalizando 65536 portas possíveis. Essas portas são divididas em três categorias:

Portas bem conhecidas (Well-Known Ports): 0 a 1023 - Essas portas são reservadas para serviços de rede padrão, como HTTP (porta 80), HTTPS (porta 443), FTP (porta 21), etc. Essas portas geralmente requerem privilégios de administrador para serem usadas.

Portas registradas (Registered Ports): 1024 a 49151 - Essas portas são designadas pela IANA para uso por aplicações e serviços específicos. Elas não requerem privilégios de administrador para serem usadas.

Portas dinâmicas ou privadas (Dynamic or Private Ports): 49152 a 65535 - Essas portas são usadas para conexões temporárias ou dinâmicas, como portas de origem para conexões de saída, ou para aplicações que não têm uma porta designada.




Explicação de configurações de socket
1. **Configuração da opção `SO_REUSEADDR`**:
   - **Objetivo**: Configurar o socket para reutilizar o endereço.
   - **Descrição**: Usa `setsockopt` para permitir que o socket reutilize o endereço (`SO_REUSEADDR`). Isso é útil para permitir que um socket vincule um endereço que estava em uso recentemente.

2. **Configuração da opção `O_NONBLOCK`**:
   - **Objetivo**: Configurar o socket para operação não bloqueante.
   - **Descrição**: Usa `fcntl` para definir a flag `O_NONBLOCK`, que permite ao socket realizar operações não bloqueantes. Isso significa que chamadas como `accept()`, `recv()`, e `send()` não bloquearão o processo se não puderem ser completadas imediatamente.

3. **Associação (bind) do socket**:
   - **Objetivo**: Associar o socket a um endereço específico.
   - **Descrição**: Usa `bind` para associar o socket a um endereço IP e porta especificados na estrutura `sockaddr`.

4. **Configuração do socket para escuta**:
   - **Objetivo**: Colocar o socket em modo de escuta.
   - **Descrição**: Usa `listen` para fazer o socket aceitar conexões de entrada. O segundo parâmetro (`SOMAXCONN`) define o tamanho da fila de conexões pendentes.

Em resumo, essas configurações preparam o socket para aceitar conexões de rede, configurando-o para reutilizar o endereço, operar de forma não bloqueante, associar-se a um endereço específico e escutar conexões de entrada. Cada etapa é crucial para garantir que o servidor funcione corretamente e esteja preparado para lidar com múltiplas conexões de clientes.